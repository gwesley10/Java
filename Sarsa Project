import javax.swing.*;
import java.awt.*;
import java.util.Random;

/**
 * Created by gwesl on 5/4/2017.
 */
public class Main {
    static double[][][] Q = new double[20][20][4];
    static double[][][] E = new double[20][20][4];
    static int[][] R = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    };
    static double epsilon  = 0.9;
    static double epsilonDecay = 0.01;
    static double alpha = 0.9;
    static double lambda = 0.01;
    static double gamma = 0.9;
    static int current_column = 2;
    static int current_row = 2;
    static int next_column;
    static int next_row;
    static int goal_column = 7;
    static int goal_row = 7;
    static int move =-1;
    static JFrame frame = new JFrame();
    static JButton[][] btn;

    public static void main(String[] args) {
        frame.setLayout(new GridLayout(20,20));
        btn= new JButton[20][20];
        for(int i = 0 ; i < 20; i++){
            for(int j = 0; j < 20; j++){
                btn[i][j]=new JButton();
                frame.add(btn[i][j]);
            }
        }
        btn[goal_column][goal_row].setBackground(Color.black);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);

        for(int i = 0; i < 20; i++){
            for(int j = 0; j < 20; j++){
                for(int k = 0; k < 4; k++){
                    Random rand = new Random();
                    int number = rand.nextInt(10);
                    double result = number / 100.0;
                    Q[i][j][k] = result;
                }
            }
        }
        for(int i = 0; i < 20; i++){
            Q[0][i][0]=-1;
            Q[19][i][1]=-1;
            Q[i][0][2]=-1;
            Q[i][19][3]=-1;
        }

        for(int q = 0; q < 10; q++){

            for(int i = 0; i < 20; i++){
                for(int j =0; j <20; j++){
                    for(int k = 0; k < 4; k++){
                        E[i][j][k] = 0;
                    }
                }
            }
            current_column=2;
            current_row=2;
            boolean goal = true;
            while(goal == true){
                double r;
                Random rand = new Random();
                int number = rand.nextInt(10);
                double compare = number/100.0;
                btn[current_column][current_row].setBackground(Color.gray);
                if(epsilon<=compare){
                    if(Q[current_column][current_row][0]>Q[current_column][current_row][1] &&
                            Q[current_column][current_row][0]>Q[current_column][current_row][2] &&
                            Q[current_column][current_row][0]>Q[current_column][current_row][3]){
                        if(current_row==0){
                            move=4;
                        }else {
                            move = 1;
                            next_row = current_row + 1;
                            next_column = current_column;
                        }
                    }else if(Q[current_column][current_row][1]>Q[current_column][current_row][0] &&
                            Q[current_column][current_row][1]>Q[current_column][current_row][2] &&
                            Q[current_column][current_row][1]>Q[current_column][current_row][3]){
                        move=2;
                        next_row = current_row-1;
                        next_column = current_column;
                    }else if(Q[current_column][current_row][2]>Q[current_column][current_row][0] &&
                            Q[current_column][current_row][2]>Q[current_column][current_row][1] &&
                            Q[current_column][current_row][2]>Q[current_column][current_row][3]){
                        move=3;
                        next_column = current_column-1;
                        next_row = current_row;
                    }else{
                        move=4;
                        next_column = current_column+1;
                        next_row = current_row;
                    }
                }
                if(move==-1){
                    move = randMove();
                }
                if(move == 1){
                    if(current_row == 0){
                        break;
                    }else{
                        next_row = current_row+1;
                        next_column = current_column;
                    }
                }else if(move == 2){
                    if(current_row == 19){
                        break;
                    }
                    else{
                        next_row = current_row-1;
                        next_column = current_column;
                    }
                }else if(move == 3){
                    if(current_column == 0){
                        break;
                    }else{
                        next_column = current_column-1;
                        next_row = current_row;
                    }
                }else{
                    if(current_column == 19){
                        break;
                    }else{
                        next_column = current_column+1;
                        next_row = current_row;
                    }
                }
                System.out.println("move " +move);
                System.out.println("current column " +current_column);
                System.out.println("current row " +current_row);
                System.out.println("nextcolumn " +next_column);
                System.out.println("next row " +next_row);
                /*if(next_column==-1){
                    next_column=0;
                }else if(next_column==20){
                    next_column=19;
                }else if(next_row==-1){
                    next_row=0;
                }else if(next_row==20){
                    next_row=19;
                }*/
                int maxMove = maxMove(move);
                    if(move == 1 && maxMove==2){
                        while(maxMove==2){
                            maxMove=randMove();
                        }
                    }else if(move == 2 && maxMove==1){
                        while(maxMove==1){
                            maxMove=randMove();
                        }
                    }else if(move == 3 && maxMove==4){
                        while(maxMove==4){
                            maxMove=randMove();
                        }
                    }else if(move == 4 && maxMove==3){
                        while(maxMove==3){
                            maxMove=randMove();
                        }
                    }
                r = R[next_column][next_row];
                System.out.println("max move " +maxMove);
                double delta = r + gamma*Q[next_column][next_row][maxMove-1] - Q[current_column][current_row][move-1];
                E[current_column][current_row][move-1] = E[current_column][current_row][move-1] + 1;
                for(int i = 0; i < 20; i++){
                    for(int j = 0; j < 20; j++){
                        Q[current_column][current_row][move-1] = Q[current_column][current_row][move-1] +alpha*delta*E[current_column][current_row][move-1];
                        E[current_column][current_row][move-1] = gamma*lambda*E[current_column][current_row][move-1];
                    }
                }
                if(next_column==-1||next_column==20||next_row==-1||next_row==20){
                    goal=false;
                }
                current_column = next_column;
                current_row = next_row;
                move=maxMove;
                btn[current_column][current_row].setBackground(Color.blue);
                //printCurrentPosition();
                System.out.println();
                if(current_column == goal_column && current_row==goal_row){
                    goal=false;
                }
            }
            if(epsilon>.0005){
                epsilon=-epsilonDecay;
            }
        }

    }

    public static int maxMove(int move){
        int move1, move2, move3;
        if(move == 1){
            move1=1;
            move2=3;
            move3=4;

        }else if(move == 2){
            move1=2;
            move2=3;
            move3=4;
        }else if(move == 3){
            move1=1;
            move2=2;
            move3=3;
        }else{
            move1=1;
            move2=2;
            move3=4;
        }
        return compare(move1, move2, move3, move);
    }

    public static int compare(int q, int w, int y, int move){
        double a;
        double x;
        double c;
        if(move==1){
            if(next_column == 0){
                a = Q[next_column][next_row][q-1];
                x = 0;
                c = Q[next_column][next_row][y-1];
            }else if(next_column==19){
                a = Q[next_column][next_row][q-1];
                x = Q[next_column][next_row][w-1];
                c = 0;
            }else if(next_row==0){
                a = 0;
                x = Q[next_column][next_row][w-1];
                c = Q[next_column][next_row][y-1];
            }else{
                a = Q[next_column][next_row][q-1];
                x = Q[next_column][next_row][w-1];
                c = Q[next_column][next_row][y-1];
            }
        }else if(move==2){
            if(next_column == 0){
                a = Q[next_column][next_row][q-1];
                x = 0;
                c = Q[next_column][next_row][y-1];
            }else if(next_column==19){
                a = Q[next_column][next_row][q-1];
                x = Q[next_column][next_row][w-1];
                c = 0;
            }else if(next_row==19){
                a = 0;
                x = Q[next_column][next_row][w-1];
                c = Q[next_column][next_row][y-1];
            }else{
                a = Q[next_column][next_row][q-1];
                x = Q[next_column][next_row][w-1];
                c = Q[next_column][next_row][y-1];
            }
        }else if(move==3){
            if(next_column == 0){
                a = Q[next_column][next_row][q-1];
                x = Q[next_column][next_row][w-1];
                c = 0;
            }else if(next_row==0){
                a = 0;
                x = Q[next_column][next_row][w-1];
                c = Q[next_column][next_row][y-1];
            }else if(next_row==19){
                a = Q[next_column][next_row][q-1];
                x = 0;
                c = Q[next_column][next_row][y-1];
            }else{
                a = Q[next_column][next_row][q-1];
                x = Q[next_column][next_row][w-1];
                c = Q[next_column][next_row][y-1];
            }
        }else{
            if(next_column==19){
                a = Q[next_column][next_row][q-1];
                x = Q[next_column][next_row][w-1];
                c = 0;
            }else if(next_row==0){
                a = 0;
                x = Q[next_column][next_row][w-1];
                c = Q[next_column][next_row][y-1];
            }else if(next_row==19){
                a = Q[next_column][next_row][q-1];
                x = 0;
                c = Q[next_column][next_row][y-1];
            }else{
                a = Q[next_column][next_row][q-1];
                x = Q[next_column][next_row][w-1];
                c = Q[next_column][next_row][y-1];
            }
        }

        double max = Math.max(Math.max(a,x),c);
        System.out.println(max);
        if(max==a){
            return q;
        }else if(max==x){
            return w;
        }else{
            return y;
        }
    }

    public static int randMove(){

        int rand = (int) ((Math.random() * 4) + 1);
        return rand;
    }

    public static void printCurrentPosition(){
        for(int i =0; i < 20; i++){
            for(int j = 0; j < 20; j++){
                if(i == current_column && j == current_row){
                    System.out.print("X\t");
                }else{
                    System.out.print(R[i][j]+"\t");
                }
            }
            System.out.println();
        }
    }

}
