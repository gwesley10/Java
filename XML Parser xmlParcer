import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 * Created by gwesl on 2/25/2017.
 */
public class xmlParser {

    Scanner scanner = null;

    Tree parse(){

        Tree root = new Tree();
        try{
            File xmlFile = new File("C:\\Users\\gwesl\\Desktop\\example.xml");
            scanner = new Scanner(xmlFile);
        } catch(FileNotFoundException e){
            e.printStackTrace();
        }
        return buildTree(root);
    }

    Tree buildTree(Tree tree){

        while(scanner.hasNextLine() == true){

            String line = scanner.nextLine();
            if(line.equals("")){
                continue;
            }

            if(findString(line, "</", 1) >= 0){
                continue;
            }

            String behavior = getBehavior(line);

            if(!behavior.equals("")){
                addBehavior(tree, behavior);
            }else{
                assert(tree.getData().equals(""));
                int begin = findString(line, '<', 1);
                int end = findString(line, '>', 1);
                assert(begin >= 0 && end >= 0);
                tree.setData(line.substring(begin, end+1));
            }
        }

        return tree;

    }

    void addBehavior(Tree bTree, String behavior){

        Tree leaf = new Tree();
        leaf.setData(behavior);

        while(scanner.hasNextLine()){

            String line = scanner.nextLine();

            String leafResponse = getResponse(line);
            String leafBehavior = getBehavior(line);

            if(!leafBehavior.equals("")){
                addBehavior(leaf, leafBehavior);
            }else if(!leafResponse.equals("")){
                addResponse(leaf, leafResponse);
            }else{
                break;
            }
        }

        bTree.addLeaf(leaf);

    }

    void addResponse(Tree bTree, String response){

        Tree leaf = new Tree();
        leaf.setData(response);
        bTree.addLeaf(leaf);

    }

    String getBehavior(String line){

        String behavior = "";
        int quote1 = findString(line, '"', 1);
        int quote2 = findString(line, '"', 2);
        if(quote1 >= 0){
            behavior = line.substring(quote1+1, quote2);
        }
        return behavior;
    }

    String getResponse(String line){

        String response = "";
        int quote3 = findString(line, '"', 3);
        int quote4 = findString(line, '"', 4);
        if(quote3 >= 0){
            response = line.substring(quote3+1, quote4);
        }
        return response;
    }

    public int findString(String line, char character, int number){

        int position = line.indexOf(character, 0);
        while(--number > 0 && position != -1){
            position = line.indexOf(character, position+1);
        }
        return position;

    }

    public int findString(String line, String string, int number){

        int position = line.indexOf(string, 0);
        while(--number > 0 && position != -1){
            position = line.indexOf(string, position+1);
        }
        return position;

    }

    void printTree(Tree tree, int tab){

        for(int i = tab; i > 0 ; i--){
            System.out.print("\t");
        }
        if(tree.totalNumberLeaves()>0){
            System.out.println("behavior =" + tree.getData());
        }else{
            System.out.println("response =" + tree.getData());
        }
        for(int i = 0; i < tree.totalNumberLeaves(); i++){
            printTree(tree.getLeaf(i), tab+1);
        }

    }

}
